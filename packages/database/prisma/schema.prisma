generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Template {
  id          Int          @id @default(autoincrement())
  title       String
  questions   Question[]
  assignments Assignment[]
  timeLimit   Int
  headings    Heading[]
  maxScore    Int
}

model Heading {
  id                 Int      @id @default(autoincrement())
  title              String
  description        String?
  questionRangeStart Int
  questionRangeEnd   Int
  testId             Int
  test               Template @relation(fields: [testId], references: [id], onDelete: Cascade)
}

model Question {
  id               Int      @id @default(autoincrement())
  title            String
  description      String?
  templateAnswers  String[]
  correctAnswer    String
  testId           Int
  template         Template @relation(fields: [testId], references: [id], onDelete: Cascade)
  submittedAnswers Answer[]
}

model Assignment {
  id               Int          @id @default(autoincrement())
  testId           Int
  template         Template     @relation(fields: [testId], references: [id])
  groupId          Int
  group            Group        @relation(fields: [groupId], references: [id])
  submittedAnswers Answer[]
  started          Boolean      @default(false)
  startTime        DateTime?
  endTime          DateTime?
  submissions      Submission[]
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model Submission {
  id           Int        @id @default(autoincrement())
  userId       Int
  user         User       @relation(fields: [userId], references: [id])
  assignmentId Int
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  evaluation   Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([userId, assignmentId], name: "user_test")
}

model Answer {
  id           Int        @id @default(autoincrement())
  value        String
  index        Int
  questionId   Int
  question     Question   @relation(fields: [questionId], references: [id])
  userId       Int
  user         User       @relation(fields: [userId], references: [id])
  assignmentId Int
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  evaluated    Boolean    @default(false)
  evaluation   Int?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([userId, questionId, assignmentId], name: "user_question_test")
}

model Group {
  id          Int              @id @default(autoincrement())
  name        String
  admins      AdminsOnGroups[]
  users       User[]
  assignments Assignment[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model Admin {
  id        Int              @id @default(autoincrement())
  username  String           @unique
  name      String
  surname   String
  email     String           @unique
  password  String
  groups    AdminsOnGroups[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model AdminsOnGroups {
  id        Int      @id @default(autoincrement())
  adminId   Int
  admin     Admin    @relation(fields: [adminId], references: [id])
  groupId   Int
  group     Group    @relation(fields: [groupId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id          Int          @id @default(autoincrement())
  // applicationId
  username    String       @unique
  name        String?
  surname     String?
  email       String?
  password    String
  groupId     Int?
  group       Group?       @relation(fields: [groupId], references: [id])
  answers     Answer[]
  submissions Submission[]
  Feedback    Feedback[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Feedback {
  id        Int      @id @default(autoincrement())
  content   String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
