generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TestTemplate {
  id            Int            @id @default(autoincrement())
  title         String
  questions     Question[]
  assignedTests AssignedTest[]
  timeLimit     Int
  headings      Heading[]
  maxScore      Int
}

model Heading {
  id                 Int          @id @default(autoincrement())
  title              String
  description        String?
  questionRangeStart Int
  questionRangeEnd   Int
  testId             Int
  test               TestTemplate @relation(fields: [testId], references: [id], onDelete: Cascade)
}

model Question {
  id               Int          @id @default(autoincrement())
  title            String
  description      String?
  answers          String[]
  correctAnswer    String
  testId           Int
  test             TestTemplate @relation(fields: [testId], references: [id], onDelete: Cascade)
  submittedAnswers Answer[]
}

model AssignedTest {
  id               Int              @id @default(autoincrement())
  testId           Int
  test             TestTemplate     @relation(fields: [testId], references: [id])
  groupId          Int
  group            Group            @relation(fields: [groupId], references: [id])
  submittedAnswers Answer[]
  started          Boolean          @default(false)
  startTime        DateTime?
  endTime          DateTime?
  submissions      TestSubmission[]
}

model TestSubmission {
  id           Int          @id @default(autoincrement())
  userId       Int
  user         User         @relation(fields: [userId], references: [id])
  testId       Int
  assignedTest AssignedTest @relation(fields: [testId], references: [id])
  evaluation   Int
  submittedAt  DateTime

  @@unique([userId, testId], name: "user_test")
}

model Answer {
  id             Int          @id @default(autoincrement())
  value          String
  questionId     Int
  question       Question     @relation(fields: [questionId], references: [id])
  userId         Int
  user           User         @relation(fields: [userId], references: [id])
  assignedTest   AssignedTest @relation(fields: [assignedTestId], references: [id])
  assignedTestId Int
  evaluated      Boolean      @default(false)
  evaluation     Int?

  @@unique([userId, questionId, assignedTestId], name: "user_question_test")
}

model Group {
  id            Int              @id @default(autoincrement())
  name          String
  admins        AdminsOnGroups[]
  users         User[]
  assignedTests AssignedTest[]
}

model Admin {
  id       Int              @id @default(autoincrement())
  username String           @unique
  name     String
  surname  String
  email    String           @unique
  password String
  groups   AdminsOnGroups[]
}

model AdminsOnGroups {
  id      Int   @id @default(autoincrement())
  adminId Int
  admin   Admin @relation(fields: [adminId], references: [id])
  groupId Int
  group   Group @relation(fields: [groupId], references: [id])
}

model User {
  id              Int              @id @default(autoincrement())
  // applicationId
  username        String           @unique
  name            String?
  surname         String?
  email           String?
  password        String
  groupId         Int?
  group           Group?           @relation(fields: [groupId], references: [id])
  answers         Answer[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  testSubmissions TestSubmission[]
  Feedback        Feedback[]
}

model Feedback {
  id        Int      @id @default(autoincrement())
  content   String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}
